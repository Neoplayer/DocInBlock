@using System.Numerics
@using System.Linq
@using System.Text.Json;
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web

@inject IDocService _docService;

<div class="container">
    <div class="row">
        <h2>
            Создать документ
        </h2>
    </div>
    @if (_hasLoaded)
    {
        <Form Model="@document"
              LabelColSpan="8"
              WrapperColSpan="16"
              OnFinish="OnFinish"
              OnFinishFailed="OnFinishFailed">

            <FormItem Label="Название программы">
                <Input @bind-Value="@context.Name" />
            </FormItem>

            <FormItem Label="Тип мероприятия">
                <RadioGroup @bind-Value="@context.Type">
                    <Radio RadioButton Value="@("Lesson")">Lesson</Radio>
                    <Radio RadioButton Value="@("Trenning")">Trenning</Radio>
                    <Radio RadioButton Value="@("ProfessionalDevelopment")">Professional development</Radio>
                </RadioGroup>
            </FormItem>

            <FormItem Label="Формат программы">
                <RadioGroup @bind-Value="@context.Format">
                    <Radio RadioButton Value="@("Online")">Online</Radio>
                    <Radio RadioButton Value="@("Offline")">Offline</Radio>
                    <Radio RadioButton Value="@("Mixed")">Mixed</Radio>
                </RadioGroup>
            </FormItem>

            <FormItem Label="Место проведения">
                <Cascader @bind-Value="@context.Region" Options="districts" />
            </FormItem>

            <FormItem Label="Даты проведения">
                <RangePicker @bind-Value="@context.RangeDates" />
            </FormItem>

            <FormItem Label="Количество дней">
                <AntDesign.InputNumber @bind-Value="@context.Days" Min="0" Max="200"/>
            </FormItem>

            <FormItem Label="Количество часов">
                <AntDesign.InputNumber @bind-Value="@context.Hours" Min="0" Max="200"/>
            </FormItem>

            <FormItem Label="Организатор программы">
                <Input @bind-Value="@context.EventOrganizer" />
            </FormItem>

            <FormItem Label="Примечания">
                <TextArea @bind-Value="@context.Notes" />
            </FormItem>

            <FormItem WrapperColSpan="24">
            <Divider Orientation="left">Agents</Divider>

            @if(agents.Any())
            {
                <AntList Bordered DataSource="@agents" Size="small">
                    <ChildContent Context="item">
                        <ListItem>
                            @item
                            <Button Danger Type="@ButtonType.Primary" Icon="@IconType.Outline.Close" OnClick="@(e => RemoveAgent(item))"/>
                        </ListItem>
                    </ChildContent>
                </AntList>
            }

            <Search @ref=@_input Placeholder="Agent address" AllowClear="@true" Size="@InputSize.Large" @bind-Value="@currentAdress" EnterButton="@("Add")" OnSearch="@AddAgent"/>
            </FormItem>

            <FormItem WrapperColOffset="8" WrapperColSpan="16">
                <Button Type="@ButtonType.Primary"
                     Loading="_submitLoading"
                     HtmlType="submit">
                    Создать
                </Button>
            </FormItem>
        </Form>
    }
    else
    {
        <Spin />
    }
</div>


@code {
    AntDesign.Search _input;	
    private string currentAdress;

    private bool _submitLoading;

    private bool _hasLoaded = false;

    private DocumentData document = new DocumentData();
    private List<string> agents = new List<string>();

    private List<CascaderNode> districts;

    protected override async Task OnInitializedAsync()
    {
        districts = RegionsManager.Regions.Select(x => new CascaderNode()
            {
                Value = x.Id.ToString(),
                Label = x.Label,
                Children = x.Childs.Select(y => new CascaderNode()
                {
                    Value = x.Id.ToString() + y.Id.ToString(),
                    Label = y.Label
                })
            }).ToList();

        _hasLoaded = true;
    }   

    private async Task OnFinish(EditContext editContext)
    {
        _submitLoading = true;
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(document)}");

        await _docService.CreateDocumentRequestAndWaitForReceiptAsync(document, agents);

        document = new DocumentData();
        agents = new List<string>();

        await DocumentsManager.UpdateCollection();

        _submitLoading = false;
    }

    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(document)}");
    }

    private async Task AddAgent()
    {
        if (string.IsNullOrEmpty(currentAdress))
        {
            return;
        }

        agents.Add(currentAdress);
        await _input.Focus(FocusBehavior.FocusAndClear, false);
        StateHasChanged();
    }

    private void RemoveAgent(string address)
    {
        agents.Remove(address);
        StateHasChanged();
    }
}
