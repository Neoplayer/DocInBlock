@using EthContract;
@using System.Numerics
@using System.Linq
@using System.Collections.ObjectModel

@inject IDocService _docService;

<div class="container">
    <div class="row">
        <h2>
            Документы пользователя
        </h2>
    </div>
    @if (_hasLoaded)
    {
        <AntList Grid="grid" DataSource="@docsResult">
            <ListItem >
                <DocCard Id="@context" IsIdle="@idleDocs.Contains(context)"/>
            </ListItem>
        </AntList>
    }
    else
    {
        <Spin />
    }
</div>


@code {
    [Parameter]
    public string Address { get; set; }

    private bool _hasLoaded = false;
    private List<BigInteger> docsResult = new List<BigInteger>();
    private List<BigInteger> idleDocs = new List<BigInteger>();

    protected override async Task OnInitializedAsync()
    {
        await UpdateDocumentsList();

        DocumentsManager.OnNewDoc += async () =>
        {
            docsResult = new List<BigInteger>(); // To avoid bug
            idleDocs = new List<BigInteger>();
            StateHasChanged();

            await UpdateDocumentsList();
            StateHasChanged();
        };
    }

    protected async Task UpdateDocumentsList()
    {
        _hasLoaded = false;

        docsResult = await _docService.GetUserDocsQueryAsync(Address);
        var idleDocsRes = await _docService.GetUserDocsToSignQueryAsync(Address);
        idleDocs = idleDocsRes.Documents.Take((int)idleDocsRes.Counter).ToList();

        _hasLoaded = true;
    }

    private ListGridType grid = new()
    {
        Gutter = 16,
        Xs = 1,
        Sm = 2,
        Md = 4,
        Lg = 4,
        Xl = 6,
        Xxl = 3,
    };
}
