@page "/"
@using EthContract.ContractDefinition
@using Nethereum.Erc20.Blazor;
@using Nethereum.Hex.HexTypes;
@using EthContract.Blazor;
@using Newtonsoft.Json

@inject IJSRuntime jsRuntime;
@inject IEthereumHostProvider _ethereumHostProvider;
@inject NethereumAuthenticator  _nethereumAuthenticator;
@inject IDocService service; 

@if (EthereumAvailable == true && !string.IsNullOrEmpty(SelectedAccount))
{
    <Row>
        <GridCol Span="8">
            <CreateDocForm />
        </GridCol>
        <GridCol Span="16">
            <DocsList Address="@SelectedAccount"/>
        </GridCol>
    </Row>
    <Upload Action="https://api.web3.storage/upload"
            Headers="@Headers"
            Name="file"
            OnSingleCompleted="OnSingleCompleted">
        <Button Icon="upload">
            <span>Click to Upload</span>
        </Button>
    </Upload>
}
else
{
    <div>
        Please connect to Ethereum !!!
    </div>

}
@code{

    bool EthereumAvailable { get; set; }
    string SelectedAccount { get; set; }
    string BlockHash { get; set; }
    string TransactionHash { get; set; }
    string ErrorTransferMessage { get; set; }
    protected string AuthenticatedAccount { get; set; }

    private static Dictionary<string, string> Headers = new Dictionary<string, string>
    {
        { "Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweDg4NEFFNkEyMjYyNEIyMjI4NTZiQWREZDc5Q2U2Y0NCRDlDODBlNUQiLCJpc3MiOiJ3ZWIzLXN0b3JhZ2UiLCJpYXQiOjE2NDM2MzI2MzIyOTMsIm5hbWUiOiJEb2NUb0Jsb2NrIn0.37-S7b1KsVOy901eluSvcPC4_wJhAZxnlCpK6gH4edw" }
    };
    void OnSingleCompleted(UploadInfo fileinfo)
    {
        if (fileinfo.File.State == UploadState.Success)
        {
            var result = fileinfo.File.GetResponse<object>();
            Console.WriteLine(JsonConvert.SerializeObject(result));
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _ethereumHostProvider.SelectedAccountChanged += HostProvider_SelectedAccountChanged;
        _ethereumHostProvider.SelectedAccountChanged += async (s) => await DocumentsManager.UpdateCollection();
        EthereumAvailable = await _ethereumHostProvider.CheckProviderAvailabilityAsync();
    }

    private async Task HostProvider_SelectedAccountChanged(string account)
    {
        SelectedAccount = account;
        this.StateHasChanged();
    }


    protected async Task GetBlockHashAsync()
    {
        var web3 = await _ethereumHostProvider.GetWeb3Async();
        var block = await web3.Eth.Blocks.GetBlockWithTransactionsByNumber.SendRequestAsync(new HexBigInteger(1));
        BlockHash = block.BlockHash;
    }



    protected async Task AddDoc(DocumentData data)
    {
        var res = await service.CreateDocumentRequestAsync(data, new List<string>());
    }

    protected async Task TransferEtherAsync()
    {
        try
        {
            var web3 = await _ethereumHostProvider.GetWeb3Async();

            TransactionHash = await web3.Eth.GetEtherTransferService().TransferEtherAsync("0x13f022d72158410433cbd66f5dd8bf6d2d129924", 0.001m);
        }
        catch (Exception ex)
        {
            ErrorTransferMessage = ex.Message;
        }
    }

    public async Task AuthenticateAsync()
    {

        AuthenticatedAccount = await _nethereumAuthenticator.RequestNewChallengeSignatureAndRecoverAccountAsync();

    }
}
